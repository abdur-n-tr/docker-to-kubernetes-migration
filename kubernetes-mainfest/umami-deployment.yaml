apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert
    kompose.version: 1.22.0 (955b78124)
    traefik.enable: "true"
    traefik.http.routers.umami.entrypoints: websecure
    traefik.http.routers.umami.middlewares: ratelimit@file, security-headers@file, error-pages-middleware, geoblock@file
    traefik.http.routers.umami.rule: Host(`umami.`)
    traefik.http.routers.umami.tls.certresolver: leresolver
  creationTimestamp: null
  labels:
    io.kompose.service: umami
  name: umami
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: umami
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert
        kompose.version: 1.22.0 (955b78124)
        traefik.enable: "true"
        traefik.http.routers.umami.entrypoints: websecure
        traefik.http.routers.umami.middlewares: ratelimit@file, security-headers@file, error-pages-middleware, geoblock@file
        traefik.http.routers.umami.rule: Host(`umami.`)
        traefik.http.routers.umami.tls.certresolver: leresolver
      creationTimestamp: null
      labels:
        io.kompose.network/net: "true"
        io.kompose.network/umami: "true"
        io.kompose.service: umami
    spec:
      initContainers:
      - name: wait-for-postgres
        image: busybox
        command: ['sh', '-c', 'while ! nc -z umami-db 5432; do echo "Waiting for PostgreSQL"; sleep 1; done']
      containers:
        - env:
            - name: DATABASE_TYPE
              value: postgresql
            - name: DATABASE_URL
              value: postgresql://umami:umami@umami-db:5432/umami
            - name: HASH_SALT
              value: replace-me-with-a-random-string
          image: ghcr.io/mikecao/umami:postgresql-latest
          name: umami
          ports:
            - containerPort: 3000
          resources: {}
      restartPolicy: Always
status: {}
